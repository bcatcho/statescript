
#line 1 "Scanner.rl.cs"
// This file is AUTOGENERATED with RAGEL
// !!DO NOT EDIT!! Change the RL file and compile with Ragel
// See the ScannerGenerator directory.
// http://www.colm.net/open-source/ragel/
using System.Collections.Generic;
using Transition.Compiler.Tokens;

namespace Transition.Compiler
{
   /// <summary>
   /// Scanner performs lexical analysis on a string of characters and
   /// and emits a string of tokens for the Parser to analyze.
   /// </summary>
   public class Scanner
   {
      int _lineNumber = 0;
      bool _tokenUncommitted;
      int _tokenStart { get { return _token.StartIndex; } }
      Token _token;
      private List<Token> _tokens;

      // ragel properties
      private int eof;
      private int cs;
      private int p;

      private void StartToken(TokenType tokenType)
      {
        #if PARSER_LOGGING
        Log(string.Format("start {0}", tokenType));
        #endif
        _token = new Token {
            LineNumber = _lineNumber,
            StartIndex = p,
            TokenType = tokenType
        };
        _tokenUncommitted = true;
      }

      private void StartOperatorToken(TokenOperator tokenOperator)
      {
        #if PARSER_LOGGING
        Log(string.Format("start {0}", tokenOperator));
        #endif
        _token = new Token {
            LineNumber = _lineNumber,
            StartIndex = p,
            Operator = tokenOperator,
            TokenType = TokenType.Operator,
        };
        _tokenUncommitted = true;
      }

      #if PARSER_LOGGING
      private void Log(string msg) {
        Console.WriteLine(string.Format("{0} {1}", p, msg));
      }
      #endif

      private void EmitToken() {
        #if PARSER_LOGGING
        Log(string.Format("emit {0}", _token.TokenType));
        #endif
        _token.Length = p - _tokenStart;
        _tokens.Add(_token);
        _tokenUncommitted = false;
      }

      private void EmitNewLine() {
        _token.TokenType = TokenType.NewLine;
        #if PARSER_LOGGING
        Log(string.Format("emit {0}", _token.TokenType));
        #endif
        _tokens.Add(_token);
        _tokenUncommitted = false;
      }

      private void SetKeyword(TokenKeyword tokenKeyword) {
        _token.Keyword = tokenKeyword;
      }

      private void CommitLastToken() {
        if (_tokenUncommitted) {
          EmitToken();
        }
      }

      
#line 92 "tmp/Scanner.cs"
static readonly sbyte[] _Scanner_actions =  new sbyte [] {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 2, 1, 0, 2, 1, 
	2, 2, 1, 3, 2, 1, 5, 2, 
	6, 1
};

static readonly short[] _Scanner_key_offsets =  new short [] {
	0, 0, 13, 15, 17, 21, 29, 37, 
	50, 60, 75, 77, 92, 94, 96, 96, 
	97, 102, 107, 109, 111, 117, 122, 122, 
	124, 126, 126, 131, 133, 134, 135, 136, 
	142, 152, 167, 181, 192, 204, 209, 210, 
	215, 220, 222, 224, 230, 230, 232, 234, 
	234, 248, 254, 255, 256, 257, 258, 259, 
	260, 261, 262, 263, 264, 265, 266, 267, 
	268, 269, 284, 296, 312, 312, 325, 340, 
	355, 370
};

static readonly char[] _Scanner_trans_keys =  new char [] {
	'\u0020', '\u0022', '\u0023', '\u0027', '\u002d', '\u0040', '\u005f', '\u0009', 
	'\u000d', '\u0041', '\u005a', '\u0061', '\u007a', '\u0022', '\u005c', '\u0022', 
	'\u005c', '\u0020', '\u003a', '\u0009', '\u000d', '\u0020', '\u005f', '\u0009', 
	'\u000d', '\u0041', '\u005a', '\u0061', '\u007a', '\u0020', '\u005f', '\u0009', 
	'\u000d', '\u0041', '\u005a', '\u0061', '\u007a', '\u000a', '\u000d', '\u0020', 
	'\u0023', '\u005f', '\u0009', '\u000c', '\u0030', '\u0039', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u000a', '\u000d', '\u0020', '\u005f', '\u0009', '\u000c', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u000a', '\u000d', '\u0020', '\u0022', 
	'\u0023', '\u0027', '\u002d', '\u0040', '\u005f', '\u0009', '\u000c', '\u0041', 
	'\u005a', '\u0061', '\u007a', '\u000a', '\u000d', '\u000a', '\u000d', '\u0020', 
	'\u0022', '\u0023', '\u0027', '\u002d', '\u0040', '\u005f', '\u0009', '\u000c', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u0027', '\u005c', '\u0027', '\u005c', 
	'\u003e', '\u0020', '\u0022', '\u0027', '\u0009', '\u000d', '\u0020', '\u0022', 
	'\u0027', '\u0009', '\u000d', '\u0022', '\u005c', '\u0022', '\u005c', '\u000a', 
	'\u000d', '\u0020', '\u0023', '\u0009', '\u000c', '\u000a', '\u000d', '\u0020', 
	'\u0009', '\u000c', '\u0027', '\u005c', '\u0027', '\u005c', '\u0065', '\u006d', 
	'\u006f', '\u0072', '\u0073', '\u006e', '\u0078', '\u0074', '\u0065', '\u0072', 
	'\u000a', '\u000d', '\u0020', '\u0023', '\u0009', '\u000c', '\u000a', '\u000d', 
	'\u0020', '\u005f', '\u0009', '\u000c', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u000a', '\u000d', '\u0020', '\u0022', '\u0023', '\u0027', '\u002d', '\u0040', 
	'\u005f', '\u0009', '\u000c', '\u0041', '\u005a', '\u0061', '\u007a', '\u000a', 
	'\u000d', '\u0020', '\u0023', '\u002d', '\u005f', '\u0009', '\u000c', '\u0030', 
	'\u0039', '\u0041', '\u005a', '\u0061', '\u007a', '\u000a', '\u000d', '\u0020', 
	'\u002d', '\u005f', '\u0009', '\u000c', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u0020', '\u002d', '\u003a', '\u005f', '\u0009', '\u000d', '\u0030', '\u0039', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u0020', '\u002d', '\u003a', '\u0009', 
	'\u000d', '\u003e', '\u0020', '\u0022', '\u0027', '\u0009', '\u000d', '\u0020', 
	'\u0022', '\u0027', '\u0009', '\u000d', '\u0022', '\u005c', '\u0022', '\u005c', 
	'\u000a', '\u000d', '\u0020', '\u0023', '\u0009', '\u000c', '\u0027', '\u005c', 
	'\u0027', '\u005c', '\u000a', '\u000d', '\u0020', '\u0023', '\u002d', '\u005f', 
	'\u0009', '\u000c', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u000a', '\u000d', '\u0020', '\u002d', '\u0009', '\u000c', '\u0069', '\u0074', 
	'\u0061', '\u0063', '\u0068', '\u0069', '\u006e', '\u0065', '\u006e', '\u0075', 
	'\u006e', '\u0074', '\u0061', '\u0074', '\u0065', '\u000a', '\u000d', '\u0020', 
	'\u0023', '\u002d', '\u003a', '\u005f', '\u0009', '\u000c', '\u0030', '\u0039', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u000a', '\u000d', '\u0020', '\u002d', 
	'\u003a', '\u005f', '\u0009', '\u000c', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u000a', '\u000d', '\u0020', '\u0022', '\u0023', '\u0027', '\u002d', '\u003a', 
	'\u0040', '\u005f', '\u0009', '\u000c', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u0020', '\u0022', '\u0023', '\u0027', '\u002d', '\u0040', '\u005f', '\u0009', 
	'\u000d', '\u0041', '\u005a', '\u0061', '\u007a', '\u000a', '\u000d', '\u0020', 
	'\u0022', '\u0023', '\u0027', '\u002d', '\u0040', '\u005f', '\u0009', '\u000c', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u000a', '\u000d', '\u0020', '\u0022', 
	'\u0023', '\u0027', '\u002d', '\u0040', '\u005f', '\u0009', '\u000c', '\u0041', 
	'\u005a', '\u0061', '\u007a', '\u000a', '\u000d', '\u0020', '\u0022', '\u0023', 
	'\u0027', '\u002d', '\u0040', '\u005f', '\u0009', '\u000c', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u000a', '\u000d', '\u0020', '\u0022', '\u0023', '\u0027', 
	'\u002d', '\u003a', '\u0040', '\u005f', '\u0009', '\u000c', '\u0041', '\u005a', 
	'\u0061', '\u007a', (char) 0
};

static readonly sbyte[] _Scanner_single_lengths =  new sbyte [] {
	0, 7, 2, 2, 2, 2, 2, 5, 
	4, 9, 2, 9, 2, 2, 0, 1, 
	3, 3, 2, 2, 4, 3, 0, 2, 
	2, 0, 5, 2, 1, 1, 1, 4, 
	4, 9, 6, 5, 4, 3, 1, 3, 
	3, 2, 2, 4, 0, 2, 2, 0, 
	6, 4, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 7, 6, 10, 0, 7, 9, 9, 
	9, 10
};

static readonly sbyte[] _Scanner_range_lengths =  new sbyte [] {
	0, 3, 0, 0, 1, 3, 3, 4, 
	3, 3, 0, 3, 0, 0, 0, 0, 
	1, 1, 0, 0, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	3, 3, 4, 3, 4, 1, 0, 1, 
	1, 0, 0, 1, 0, 0, 0, 0, 
	4, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 4, 3, 3, 0, 3, 3, 3, 
	3, 3
};

static readonly short[] _Scanner_index_offsets =  new short [] {
	0, 0, 11, 14, 17, 21, 27, 33, 
	43, 51, 64, 67, 80, 83, 86, 87, 
	89, 94, 99, 102, 105, 111, 116, 117, 
	120, 123, 124, 130, 133, 135, 137, 139, 
	145, 153, 166, 177, 186, 195, 200, 202, 
	207, 212, 215, 218, 224, 225, 228, 231, 
	232, 243, 249, 251, 253, 255, 257, 259, 
	261, 263, 265, 267, 269, 271, 273, 275, 
	277, 279, 291, 301, 315, 316, 327, 340, 
	353, 366
};

static readonly byte[] _Scanner_indicies =  new byte [] {
	0, 2, 3, 4, 5, 6, 7, 0, 
	7, 7, 1, 9, 10, 8, 12, 13, 
	11, 14, 15, 14, 1, 16, 17, 16, 
	17, 17, 1, 18, 7, 18, 7, 7, 
	1, 20, 21, 19, 22, 23, 19, 23, 
	23, 23, 1, 25, 26, 24, 27, 24, 
	27, 27, 1, 25, 29, 28, 2, 3, 
	4, 5, 6, 30, 28, 30, 30, 1, 
	31, 32, 3, 31, 34, 33, 2, 3, 
	4, 5, 6, 7, 33, 7, 7, 1, 
	9, 36, 35, 12, 38, 37, 37, 39, 
	1, 40, 41, 42, 40, 1, 43, 44, 
	45, 43, 1, 47, 48, 46, 50, 51, 
	49, 31, 53, 52, 3, 52, 1, 31, 
	53, 52, 52, 1, 49, 47, 55, 54, 
	50, 57, 56, 56, 58, 59, 60, 61, 
	62, 1, 63, 64, 1, 65, 1, 66, 
	1, 67, 1, 69, 70, 68, 22, 68, 
	1, 72, 73, 71, 74, 71, 74, 74, 
	1, 72, 76, 75, 2, 3, 4, 5, 
	6, 77, 75, 77, 77, 1, 20, 79, 
	78, 22, 80, 81, 78, 81, 81, 81, 
	1, 25, 83, 82, 5, 27, 82, 27, 
	27, 1, 84, 85, 87, 86, 84, 86, 
	86, 86, 1, 88, 89, 90, 88, 1, 
	91, 1, 92, 93, 94, 92, 1, 95, 
	96, 97, 95, 1, 99, 100, 98, 102, 
	103, 101, 25, 26, 24, 3, 24, 1, 
	101, 99, 105, 104, 102, 107, 106, 106, 
	109, 110, 108, 22, 80, 111, 108, 111, 
	111, 111, 1, 31, 113, 112, 5, 112, 
	1, 114, 1, 115, 1, 116, 1, 117, 
	1, 118, 1, 119, 1, 120, 1, 121, 
	1, 122, 1, 123, 1, 124, 1, 125, 
	1, 126, 1, 127, 1, 128, 1, 130, 
	131, 129, 22, 85, 87, 132, 129, 132, 
	132, 132, 1, 134, 135, 133, 89, 90, 
	27, 133, 27, 27, 1, 134, 137, 136, 
	2, 3, 4, 89, 90, 6, 30, 136, 
	30, 30, 1, 11, 0, 2, 3, 4, 
	5, 6, 7, 0, 7, 7, 1, 25, 
	29, 28, 2, 3, 4, 5, 6, 30, 
	28, 30, 30, 1, 31, 34, 33, 2, 
	3, 4, 5, 6, 7, 33, 7, 7, 
	1, 72, 76, 75, 2, 3, 4, 5, 
	6, 77, 75, 77, 77, 1, 134, 137, 
	136, 2, 3, 4, 89, 90, 6, 30, 
	136, 30, 30, 1, 0
};

static readonly sbyte[] _Scanner_trans_targs =  new sbyte [] {
	1, 0, 2, 10, 12, 15, 26, 7, 
	3, 4, 68, 3, 4, 68, 4, 5, 
	6, 7, 6, 8, 70, 8, 10, 7, 
	8, 70, 8, 36, 9, 9, 65, 71, 
	10, 11, 11, 13, 14, 13, 14, 16, 
	17, 18, 23, 17, 18, 23, 19, 20, 
	22, 19, 20, 22, 21, 21, 24, 25, 
	24, 25, 27, 52, 58, 59, 61, 28, 
	50, 29, 30, 31, 32, 72, 32, 32, 
	72, 32, 48, 33, 33, 34, 35, 35, 
	15, 34, 35, 35, 37, 38, 36, 39, 
	37, 38, 39, 39, 40, 41, 45, 40, 
	41, 45, 42, 43, 44, 42, 43, 44, 
	46, 47, 46, 47, 49, 71, 49, 48, 
	49, 49, 51, 31, 53, 54, 55, 56, 
	57, 31, 31, 60, 31, 62, 63, 64, 
	31, 66, 73, 66, 65, 66, 73, 66, 
	67, 67
};

static readonly sbyte[] _Scanner_trans_actions =  new sbyte [] {
	0, 0, 0, 0, 0, 5, 9, 11, 
	13, 39, 13, 0, 3, 0, 0, 7, 
	3, 36, 0, 3, 27, 27, 3, 0, 
	0, 1, 1, 11, 0, 1, 11, 1, 
	1, 0, 1, 13, 13, 0, 0, 0, 
	3, 3, 3, 0, 0, 0, 13, 39, 
	13, 0, 3, 0, 0, 1, 13, 13, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 21, 3, 27, 27, 0, 
	1, 1, 11, 0, 1, 11, 3, 27, 
	30, 0, 0, 1, 3, 30, 0, 33, 
	0, 5, 7, 0, 3, 3, 3, 0, 
	0, 0, 13, 39, 13, 0, 3, 0, 
	13, 13, 0, 0, 3, 27, 27, 0, 
	0, 1, 0, 23, 0, 0, 0, 0, 
	0, 15, 19, 0, 25, 0, 0, 0, 
	17, 3, 27, 27, 0, 0, 1, 1, 
	0, 1
};

const int Scanner_start = 69;
const int Scanner_first_final = 69;
const int Scanner_error = 0;

const int Scanner_en_main = 69;


#line 92 "Scanner.rl.cs"


      ///<summary>
      /// This method will perform lexical analysis on the character sequence input
      //  and will return a sequence of tokens for the Parser to analyze.
      ///</summary>
      ///<returns>
      /// A sequence of tokens that the Parser can use to Analyze.
      ///</returns>
      public List<Token> Scan(char[] data, int len)
      {
         
#line 319 "tmp/Scanner.cs"
	{
	cs = Scanner_start;
	}

#line 104 "Scanner.rl.cs"
         if (_tokens == null) {
           _tokens = new List<Token>(128);
         }
         _tokens.Clear();
         _lineNumber = 1; // start at line 1 like most text editors
         p = 0;
         int pe = len;
         eof = len;
         
#line 334 "tmp/Scanner.cs"
	{
	sbyte _klen;
	short _trans;
	int _acts;
	int _nacts;
	short _keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_keys = _Scanner_key_offsets[cs];
	_trans = (short)_Scanner_index_offsets[cs];

	_klen = _Scanner_single_lengths[cs];
	if ( _klen > 0 ) {
		short _lower = _keys;
		short _mid;
		short _upper = (short) (_keys + _klen - 1);
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = (short) (_lower + ((_upper-_lower) >> 1));
			if ( data[p] < _Scanner_trans_keys[_mid] )
				_upper = (short) (_mid - 1);
			else if ( data[p] > _Scanner_trans_keys[_mid] )
				_lower = (short) (_mid + 1);
			else {
				_trans += (short) (_mid - _keys);
				goto _match;
			}
		}
		_keys += (short) _klen;
		_trans += (short) _klen;
	}

	_klen = _Scanner_range_lengths[cs];
	if ( _klen > 0 ) {
		short _lower = _keys;
		short _mid;
		short _upper = (short) (_keys + (_klen<<1) - 2);
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = (short) (_lower + (((_upper-_lower) >> 1) & ~1));
			if ( data[p] < _Scanner_trans_keys[_mid] )
				_upper = (short) (_mid - 2);
			else if ( data[p] > _Scanner_trans_keys[_mid+1] )
				_lower = (short) (_mid + 2);
			else {
				_trans += (short)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += (short) _klen;
	}

_match:
	_trans = (short)_Scanner_indicies[_trans];
	cs = _Scanner_trans_targs[_trans];

	if ( _Scanner_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _Scanner_trans_actions[_trans];
	_nacts = _Scanner_actions[_acts++];
	while ( _nacts-- > 0 )
	{
		switch ( _Scanner_actions[_acts++] )
		{
	case 0:
#line 4 "ScannerDef.rl"
	{ _lineNumber++; EmitNewLine(); }
	break;
	case 1:
#line 5 "ScannerDef.rl"
	{ EmitToken(); }
	break;
	case 2:
#line 6 "ScannerDef.rl"
	{ StartOperatorToken(TokenOperator.Transition); }
	break;
	case 3:
#line 7 "ScannerDef.rl"
	{ StartOperatorToken(TokenOperator.Assign); }
	break;
	case 4:
#line 8 "ScannerDef.rl"
	{ StartToken(TokenType.Keyword); }
	break;
	case 5:
#line 9 "ScannerDef.rl"
	{ StartToken(TokenType.Identifier); }
	break;
	case 6:
#line 10 "ScannerDef.rl"
	{ StartToken(TokenType.Value); }
	break;
	case 7:
#line 29 "ScannerDef.rl"
	{ SetKeyword(TokenKeyword.Machine); }
	break;
	case 8:
#line 30 "ScannerDef.rl"
	{ SetKeyword(TokenKeyword.State); }
	break;
	case 9:
#line 31 "ScannerDef.rl"
	{ SetKeyword(TokenKeyword.On); }
	break;
	case 10:
#line 32 "ScannerDef.rl"
	{ SetKeyword(TokenKeyword.Enter); }
	break;
	case 11:
#line 33 "ScannerDef.rl"
	{ SetKeyword(TokenKeyword.Exit); }
	break;
	case 12:
#line 34 "ScannerDef.rl"
	{ SetKeyword(TokenKeyword.Run); }
	break;
#line 460 "tmp/Scanner.cs"
		default: break;
		}
	}

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	_out: {}
	}

#line 113 "Scanner.rl.cs"
         CommitLastToken();
         return _tokens;
      }

      ///<summary>
      /// Call this method after Scan to know if the parser exited prematurely
      /// due to an error.
      ///</summary>
      ///<returns>
      /// A boolean indicating if the Scanner made it to the end of the input or not.
      ///</returns>
      public bool DidReachEndOfInput()
      {
         return (p >= eof);
      }
   }
}
