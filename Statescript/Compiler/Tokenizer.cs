
#line 1 "Tokenizer.rl.cs"
// This file is AUTOGENERATED with RAGEL
// !!DO NOT EDIT!! Change the RL file and compile with Ragel
// http://www.colm.net/open-source/ragel/
using System;
using System.Collections.Generic;
using Statescript.Compiler.Tokens;

namespace Statescript.Compiler
{
   /// <summary>
   /// Tokenizer performs lexical analysis on a string of characters using the
   /// and emits a string of tokens for the Parser to analyze.
   /// </summary>
   public class Tokenizer
   {
      int _lineNumber = 0;
      bool _tokenUncommitted;
      int _tokenStart { get { return _token.StartIndex; } }
      Token _token;
      private List<Token> _tokens;

      // ragel properties
      private int cs;
      int p;

      private void StartToken(TokenType tokenType)
      {
        #if PARSER_LOGGING
        Log(string.Format("start {0}", tokenType));
        #endif
        _token = new Token {
            LineNumber = _lineNumber,
            StartIndex = p,
            TokenType = tokenType
        };
        _tokenUncommitted = true;
      }

      private void StartOperatorToken(TokenOperator tokenOperator)
      {
        #if PARSER_LOGGING
        Log(string.Format("start {0}", tokenOperator));
        #endif
        _token = new Token {
            LineNumber = _lineNumber,
            StartIndex = p,
            Operator = tokenOperator,
            TokenType = TokenType.Operator,
        };
        _tokenUncommitted = true;
      }

      #if PARSER_LOGGING
      private void Log(string msg) {
        Console.WriteLine(string.Format("{0} {1}", p, msg));
      }
      #endif

      private void EmitToken() {
        #if PARSER_LOGGING
        Log(string.Format("emit {0}", _token.TokenType));
        #endif
        _token.Length = p - _tokenStart;
        _tokens.Add(_token);
        _tokenUncommitted = false;
      }

      private void EmitNewLine() {
        _token.TokenType = TokenType.NewLine;
        #if PARSER_LOGGING
        Log(string.Format("emit {0}", _token.TokenType));
        #endif
        _tokens.Add(_token);
        _tokenUncommitted = false;
      }

      private void SetKeyword(TokenKeyword tokenKeyword) {
        _token.Keyword = tokenKeyword;
      }

      private void CommitLastToken() {
        if (_tokenUncommitted) {
          EmitToken();
        }
      }

      
#line 91 "tmp/Tokenizer.cs"
static readonly sbyte[] _Tokenizer_actions =  new sbyte [] {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 2, 1, 0, 2, 1, 
	2, 2, 1, 3, 2, 6, 1
};

static readonly short[] _Tokenizer_key_offsets =  new short [] {
	0, 0, 11, 13, 26, 27, 32, 37, 
	39, 41, 47, 52, 52, 54, 56, 56, 
	61, 63, 64, 65, 66, 72, 82, 95, 
	109, 120, 133, 148, 160, 174, 175, 180, 
	185, 187, 189, 195, 205, 217, 222, 222, 
	224, 226, 226, 240, 246, 247, 248, 249, 
	250, 251, 252, 253, 254, 255, 256, 257, 
	258, 259, 260, 261, 274, 285, 298, 311, 
	324
};

static readonly char[] _Tokenizer_trans_keys =  new char [] {
	'\u0020', '\u0023', '\u002d', '\u0040', '\u005f', '\u0009', '\u000d', '\u0041', 
	'\u005a', '\u0061', '\u007a', '\u000a', '\u000d', '\u000a', '\u000d', '\u0020', 
	'\u0023', '\u002d', '\u0040', '\u005f', '\u0009', '\u000c', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u003e', '\u0020', '\u0022', '\u0027', '\u0009', '\u000d', 
	'\u0020', '\u0022', '\u0027', '\u0009', '\u000d', '\u0022', '\u005c', '\u0022', 
	'\u005c', '\u000a', '\u000d', '\u0020', '\u0023', '\u0009', '\u000c', '\u000a', 
	'\u000d', '\u0020', '\u0009', '\u000c', '\u0027', '\u005c', '\u0027', '\u005c', 
	'\u0065', '\u006d', '\u006f', '\u0072', '\u0073', '\u006e', '\u0078', '\u0074', 
	'\u0065', '\u0072', '\u000a', '\u000d', '\u0020', '\u0023', '\u0009', '\u000c', 
	'\u000a', '\u000d', '\u0020', '\u005f', '\u0009', '\u000c', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u000a', '\u000d', '\u0020', '\u0023', '\u002d', '\u0040', 
	'\u005f', '\u0009', '\u000c', '\u0041', '\u005a', '\u0061', '\u007a', '\u000a', 
	'\u000d', '\u0020', '\u0023', '\u002d', '\u005f', '\u0009', '\u000c', '\u0030', 
	'\u0039', '\u0041', '\u005a', '\u0061', '\u007a', '\u000a', '\u000d', '\u0020', 
	'\u002d', '\u005f', '\u0009', '\u000c', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u000a', '\u000d', '\u0020', '\u0023', '\u002d', '\u0040', '\u005f', '\u0009', 
	'\u000c', '\u0041', '\u005a', '\u0061', '\u007a', '\u000a', '\u000d', '\u0020', 
	'\u0023', '\u002d', '\u003a', '\u005f', '\u0009', '\u000c', '\u0030', '\u0039', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u000a', '\u000d', '\u0020', '\u002d', 
	'\u003a', '\u005f', '\u0009', '\u000c', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u000a', '\u000d', '\u0020', '\u0023', '\u002d', '\u003a', '\u0040', '\u005f', 
	'\u0009', '\u000c', '\u0041', '\u005a', '\u0061', '\u007a', '\u003e', '\u0020', 
	'\u0022', '\u0027', '\u0009', '\u000d', '\u0020', '\u0022', '\u0027', '\u0009', 
	'\u000d', '\u0022', '\u005c', '\u0022', '\u005c', '\u000a', '\u000d', '\u0020', 
	'\u0023', '\u0009', '\u000c', '\u000a', '\u000d', '\u0020', '\u005f', '\u0009', 
	'\u000c', '\u0041', '\u005a', '\u0061', '\u007a', '\u0020', '\u002d', '\u003a', 
	'\u005f', '\u0009', '\u000d', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', 
	'\u007a', '\u0020', '\u002d', '\u003a', '\u0009', '\u000d', '\u0027', '\u005c', 
	'\u0027', '\u005c', '\u000a', '\u000d', '\u0020', '\u0023', '\u002d', '\u005f', 
	'\u0009', '\u000c', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u000a', '\u000d', '\u0020', '\u002d', '\u0009', '\u000c', '\u0069', '\u0074', 
	'\u0061', '\u0063', '\u0068', '\u0069', '\u006e', '\u0065', '\u006e', '\u0075', 
	'\u006e', '\u0074', '\u0061', '\u0074', '\u0065', '\u000a', '\u000d', '\u0020', 
	'\u0023', '\u005f', '\u0009', '\u000c', '\u0030', '\u0039', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u0020', '\u0023', '\u002d', '\u0040', '\u005f', '\u0009', 
	'\u000d', '\u0041', '\u005a', '\u0061', '\u007a', '\u000a', '\u000d', '\u0020', 
	'\u0023', '\u002d', '\u0040', '\u005f', '\u0009', '\u000c', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u000a', '\u000d', '\u0020', '\u0023', '\u002d', '\u0040', 
	'\u005f', '\u0009', '\u000c', '\u0041', '\u005a', '\u0061', '\u007a', '\u000a', 
	'\u000d', '\u0020', '\u0023', '\u002d', '\u0040', '\u005f', '\u0009', '\u000c', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u000a', '\u000d', '\u0020', '\u0023', 
	'\u002d', '\u003a', '\u0040', '\u005f', '\u0009', '\u000c', '\u0041', '\u005a', 
	'\u0061', '\u007a', (char) 0
};

static readonly sbyte[] _Tokenizer_single_lengths =  new sbyte [] {
	0, 5, 2, 7, 1, 3, 3, 2, 
	2, 4, 3, 0, 2, 2, 0, 5, 
	2, 1, 1, 1, 4, 4, 7, 6, 
	5, 7, 7, 6, 8, 1, 3, 3, 
	2, 2, 4, 4, 4, 3, 0, 2, 
	2, 0, 6, 4, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 5, 5, 7, 7, 7, 
	8
};

static readonly sbyte[] _Tokenizer_range_lengths =  new sbyte [] {
	0, 3, 0, 3, 0, 1, 1, 0, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 3, 3, 4, 
	3, 3, 4, 3, 3, 0, 1, 1, 
	0, 0, 1, 3, 4, 1, 0, 0, 
	0, 0, 4, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 4, 3, 3, 3, 3, 
	3
};

static readonly short[] _Tokenizer_index_offsets =  new short [] {
	0, 0, 9, 12, 23, 25, 30, 35, 
	38, 41, 47, 52, 53, 56, 59, 60, 
	66, 69, 71, 73, 75, 81, 89, 100, 
	111, 120, 131, 143, 153, 165, 167, 172, 
	177, 180, 183, 189, 197, 206, 211, 212, 
	215, 218, 219, 230, 236, 238, 240, 242, 
	244, 246, 248, 250, 252, 254, 256, 258, 
	260, 262, 264, 266, 276, 285, 296, 307, 
	318
};

static readonly sbyte[] _Tokenizer_indicies =  new sbyte [] {
	0, 2, 3, 4, 5, 0, 5, 5, 
	1, 6, 7, 2, 6, 9, 8, 2, 
	3, 4, 5, 8, 5, 5, 1, 10, 
	1, 11, 12, 13, 11, 1, 14, 15, 
	16, 14, 1, 18, 19, 17, 21, 22, 
	20, 6, 24, 23, 2, 23, 1, 6, 
	24, 23, 23, 1, 20, 18, 26, 25, 
	21, 28, 27, 27, 29, 30, 31, 32, 
	33, 1, 34, 35, 1, 36, 1, 37, 
	1, 38, 1, 40, 41, 39, 42, 39, 
	1, 44, 45, 43, 46, 43, 46, 46, 
	1, 44, 48, 47, 2, 3, 4, 49, 
	47, 49, 49, 1, 51, 52, 50, 42, 
	53, 54, 50, 54, 54, 54, 1, 56, 
	57, 55, 3, 58, 55, 58, 58, 1, 
	56, 60, 59, 2, 3, 4, 61, 59, 
	61, 61, 1, 63, 64, 62, 42, 65, 
	67, 66, 62, 66, 66, 66, 1, 69, 
	70, 68, 71, 72, 58, 68, 58, 58, 
	1, 69, 74, 73, 2, 71, 72, 4, 
	61, 73, 61, 61, 1, 75, 1, 76, 
	77, 78, 76, 1, 79, 80, 81, 79, 
	1, 83, 84, 82, 86, 87, 85, 56, 
	89, 88, 2, 88, 1, 56, 89, 88, 
	58, 88, 58, 58, 1, 90, 65, 67, 
	91, 90, 91, 91, 91, 1, 92, 71, 
	72, 92, 1, 85, 83, 94, 93, 86, 
	96, 95, 95, 98, 99, 97, 42, 53, 
	100, 97, 100, 100, 100, 1, 6, 102, 
	101, 3, 101, 1, 103, 1, 104, 1, 
	105, 1, 106, 1, 107, 1, 108, 1, 
	109, 1, 110, 1, 111, 1, 112, 1, 
	113, 1, 114, 1, 115, 1, 116, 1, 
	117, 1, 51, 119, 118, 42, 120, 118, 
	120, 120, 120, 1, 0, 2, 3, 4, 
	5, 0, 5, 5, 1, 6, 9, 8, 
	2, 3, 4, 5, 8, 5, 5, 1, 
	44, 48, 47, 2, 3, 4, 49, 47, 
	49, 49, 1, 56, 60, 59, 2, 3, 
	4, 61, 59, 61, 61, 1, 69, 74, 
	73, 2, 71, 72, 4, 61, 73, 61, 
	61, 1, 0
};

static readonly sbyte[] _Tokenizer_trans_targs =  new sbyte [] {
	1, 0, 2, 4, 15, 59, 61, 2, 
	3, 3, 5, 6, 7, 12, 6, 7, 
	12, 8, 9, 11, 8, 9, 11, 10, 
	10, 13, 14, 13, 14, 16, 46, 52, 
	53, 55, 17, 44, 18, 19, 20, 21, 
	62, 21, 2, 21, 62, 21, 42, 22, 
	22, 23, 24, 63, 24, 4, 23, 24, 
	63, 24, 36, 25, 25, 26, 27, 64, 
	27, 29, 26, 30, 27, 64, 27, 29, 
	30, 28, 28, 30, 31, 32, 39, 31, 
	32, 39, 33, 34, 38, 33, 34, 38, 
	35, 35, 37, 36, 37, 40, 41, 40, 
	41, 43, 61, 43, 42, 43, 43, 45, 
	20, 47, 48, 49, 50, 51, 20, 20, 
	54, 20, 56, 57, 58, 20, 35, 35, 
	59
};

static readonly sbyte[] _Tokenizer_trans_actions =  new sbyte [] {
	0, 0, 0, 5, 9, 11, 1, 1, 
	0, 1, 0, 3, 3, 3, 0, 0, 
	0, 13, 36, 13, 0, 3, 0, 0, 
	1, 13, 13, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 21, 3, 
	27, 27, 3, 0, 1, 1, 11, 0, 
	1, 11, 3, 27, 27, 30, 0, 0, 
	1, 1, 11, 0, 1, 11, 3, 27, 
	27, 30, 0, 33, 0, 1, 1, 5, 
	7, 0, 1, 0, 3, 3, 3, 0, 
	0, 0, 13, 36, 13, 0, 3, 0, 
	0, 1, 3, 0, 0, 13, 13, 0, 
	0, 3, 27, 27, 0, 0, 1, 0, 
	23, 0, 0, 0, 0, 0, 15, 19, 
	0, 25, 0, 0, 0, 17, 3, 27, 
	0
};

const int Tokenizer_start = 60;
const int Tokenizer_first_final = 60;
const int Tokenizer_error = 0;

const int Tokenizer_en_main = 60;


#line 91 "Tokenizer.rl.cs"


      ///<summary>
      /// This method will perform lexical analysis on the character sequence input
      //  and will return a sequence of tokens for the Parser to analyze.
      ///</summary>
      ///<returns>
      /// A sequence of tokens that the Parser can use to Analyze.
      ///</returns>
      public List<Token> Tokenize(char[] data, int len)
      {
         
#line 297 "tmp/Tokenizer.cs"
	{
	cs = Tokenizer_start;
	}

#line 103 "Tokenizer.rl.cs"
         if (_tokens == null) {
           _tokens = new List<Token>(128);
         }
         _tokens.Clear();
         _lineNumber = 1; // start at line 1 like most text editors
         p = 0;
         int pe = len;
         // int eof = len;
         
#line 312 "tmp/Tokenizer.cs"
	{
	sbyte _klen;
	short _trans;
	int _acts;
	int _nacts;
	short _keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_keys = _Tokenizer_key_offsets[cs];
	_trans = (short)_Tokenizer_index_offsets[cs];

	_klen = _Tokenizer_single_lengths[cs];
	if ( _klen > 0 ) {
		short _lower = _keys;
		short _mid;
		short _upper = (short) (_keys + _klen - 1);
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = (short) (_lower + ((_upper-_lower) >> 1));
			if ( data[p] < _Tokenizer_trans_keys[_mid] )
				_upper = (short) (_mid - 1);
			else if ( data[p] > _Tokenizer_trans_keys[_mid] )
				_lower = (short) (_mid + 1);
			else {
				_trans += (short) (_mid - _keys);
				goto _match;
			}
		}
		_keys += (short) _klen;
		_trans += (short) _klen;
	}

	_klen = _Tokenizer_range_lengths[cs];
	if ( _klen > 0 ) {
		short _lower = _keys;
		short _mid;
		short _upper = (short) (_keys + (_klen<<1) - 2);
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = (short) (_lower + (((_upper-_lower) >> 1) & ~1));
			if ( data[p] < _Tokenizer_trans_keys[_mid] )
				_upper = (short) (_mid - 2);
			else if ( data[p] > _Tokenizer_trans_keys[_mid+1] )
				_lower = (short) (_mid + 2);
			else {
				_trans += (short)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += (short) _klen;
	}

_match:
	_trans = (short)_Tokenizer_indicies[_trans];
	cs = _Tokenizer_trans_targs[_trans];

	if ( _Tokenizer_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _Tokenizer_trans_actions[_trans];
	_nacts = _Tokenizer_actions[_acts++];
	while ( _nacts-- > 0 )
	{
		switch ( _Tokenizer_actions[_acts++] )
		{
	case 0:
#line 4 "TokenizerDef.rl"
	{ _lineNumber++; EmitNewLine(); }
	break;
	case 1:
#line 5 "TokenizerDef.rl"
	{ EmitToken(); }
	break;
	case 2:
#line 6 "TokenizerDef.rl"
	{ StartOperatorToken(TokenOperator.Transition); }
	break;
	case 3:
#line 7 "TokenizerDef.rl"
	{ StartOperatorToken(TokenOperator.Assign); }
	break;
	case 4:
#line 8 "TokenizerDef.rl"
	{ StartToken(TokenType.Keyword); }
	break;
	case 5:
#line 9 "TokenizerDef.rl"
	{ StartToken(TokenType.Identifier); }
	break;
	case 6:
#line 10 "TokenizerDef.rl"
	{ StartToken(TokenType.Value); }
	break;
	case 7:
#line 29 "TokenizerDef.rl"
	{ SetKeyword(TokenKeyword.Machine); }
	break;
	case 8:
#line 30 "TokenizerDef.rl"
	{ SetKeyword(TokenKeyword.State); }
	break;
	case 9:
#line 31 "TokenizerDef.rl"
	{ SetKeyword(TokenKeyword.On); }
	break;
	case 10:
#line 32 "TokenizerDef.rl"
	{ SetKeyword(TokenKeyword.Enter); }
	break;
	case 11:
#line 33 "TokenizerDef.rl"
	{ SetKeyword(TokenKeyword.Exit); }
	break;
	case 12:
#line 34 "TokenizerDef.rl"
	{ SetKeyword(TokenKeyword.Run); }
	break;
#line 438 "tmp/Tokenizer.cs"
		default: break;
		}
	}

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	_out: {}
	}

#line 112 "Tokenizer.rl.cs"
         CommitLastToken();
         return _tokens;
      }

      ///<summary>
      /// Call this method after Tokenize to know if the parser exited prematurely
      /// due to an error.
      ///</summary>
      ///<returns>
      /// A boolean indicating if the tokenizer made it to the end of the input or not.
      ///</returns>
      public bool DidReachEndOfInput()
      {
         return (cs >= Tokenizer_first_final);
      }
   }
}
