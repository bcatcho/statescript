// This file is AUTOGENERATED with RAGEL
// !!DO NOT EDIT!! Change the RL file and compile with Ragel
// http://www.colm.net/open-source/ragel/
// This RL file is the RAGEL file that generates the parser
// Build and test:
// alias mcs=/Library/Frameworks/Mono.framework/Versions/Current/bin/mcs
// ragel -A Parser.rl && mcs *.cs -define:RAGEL_TEST && mono parser.exe
// ragel -o Parser.cs -A ParserDefinition.rl.cs && mcs Parser.cs -define:RAGEL_TEST && mono parser.exe
// make sure AstNode.cs and AstParam.cs are in the same folder
namespace Statescript.Compiler
{
   using System;
   using System.Collections.Generic;

   public class AstNode
   {
      public int LineNumber { get; set; }

      public string Id { get; set; }

      public List<AstParam> Params = new List<AstParam>();
      public AstNode Parent;
      public List<AstNode> Children = new List<AstNode>();
   }

   public class AstParam
   {
      public string Name { get; set; }

      public string Val { get; set; }
   }

   public class StatescriptParser
   {
      int _lineNumber = 0;
      int _indent = 0;
      int _prevIndent = 0;
      int _tokenStart = 0;
      bool _isInCommentLine;
      AstNode _currentRoot;
      AstNode _currentNode;
      AstNode _currentParent;
      AstParam _currentParam;
      Stack<int> _indentationStack = new Stack<int>();
      List<AstNode> _trees;
      char[] _data;

      private void StartToken(int charIndex)
      {
         _tokenStart = charIndex;
      }

      private string EndToken(int charIndex)
      {
         return new String(_data, _tokenStart, charIndex - _tokenStart);
      }

      %%{
        machine Parser;
        include ParserMachine "ParserMachine.rl";
        write data;
      }%%

      private int cs;

      public void Init()
      {
         %% write init;
      }

      public IList<AstNode> Exec(char[] data, int len)
      {
         if (_trees == null) {
            _trees = new List<AstNode>();
         }
         _trees.Clear();
         _lineNumber = 1; // start at line 1 like most text editors
         _data = data;
         _tokenStart = 0;
         int p = 0;
         int pe = len;
         int eof = len;
         %% write exec;
         return _trees;
      }

      public bool Finish()
      {
         return (cs >= Parser_first_final);
      }
   }
}
